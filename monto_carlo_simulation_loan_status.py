# -*- coding: utf-8 -*-
"""Monto Carlo Simulation Loan status.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1iFQxGq1RNw1utfjb7VB3D9nDsAk9G8G5
"""

#@markdown ##Play the cell to connect your Google Drive to Colab


# mount user's Google Drive to Google Colab.
from google.colab import drive
drive.mount('/content/drive')

# Add you path to the dataset here:

!ls
import pandas as pd

# Specify the file path of the CSV file
file_path = '/content/drive/MyDrive/data/loan_timing.csv'

# Read the CSV file into a pandas DataFrame
df = pd.read_csv(file_path)

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt


df.columns = ["origination", "chargeoff"]

# Partition the dataset into default (charged off) and current loans
default = df.dropna(subset=["chargeoff"])
current = df[df["chargeoff"].isna()]

# Exploratory Data Analysis

# Figure 1: Histogram of days to charge-off for defaulted loans
plt.hist(default["chargeoff"], color="skyblue", edgecolor="white")
plt.xlabel('Days to Charge-off')
plt.ylabel('Count')
plt.title("Histogram of Days to Charge-off for Defaulted Loans")
plt.show()

# Figure 2: Histogram of days since origination for defaulted loans
plt.hist(default["origination"], color="skyblue", edgecolor="white")
plt.xlabel('Days since Origination')
plt.ylabel('Count')
plt.title("Histogram of Days since Origination for Defaulted Loans")
plt.show()

# Figure 3: Plot of days to charge-off vs. days since origination for defaulted loans
plt.scatter(default["origination"], default["chargeoff"])
plt.xlabel('Days since Origination')
plt.ylabel('Days to Charge-off')
plt.title("Days to Charge-off vs. Days since Origination")
plt.show()

# Figure 4: Histogram of days since origination for active loans
plt.hist(current["origination"], color="skyblue", edgecolor="white")
plt.xlabel('Days since Origination')
plt.ylabel('Count')
plt.title("Histogram of Days since Origination for Current Loans")
plt.show()

# Monte Carlo Simulation of Defaulted Loans
np.random.seed(2)
N = 3 * 365  # Loan duration in days
df_MC = pd.DataFrame({
    'u': np.round(np.random.uniform(0, N, 15500)),
    'v': np.round(np.random.uniform(0, N, 15500))
})
df_MC = df_MC[(df_MC["v"] <= df_MC["u"]) & (df_MC["u"] <= 730) & (df_MC["v"] <= 730)]

plt.scatter(df_MC["u"], df_MC["v"])
plt.xlabel('Days since Origination')
plt.ylabel('Days to Charge-off')
plt.title("MC Simulation of Days to Charge-off vs. Days since Origination")
plt.show()

# Predicting the fraction of loans that will charge off by the end of their 3-year terms
np.random.seed(2)
B = 1000
fractions = []

for _ in range(B):
    df2 = pd.DataFrame({
        'u': np.round(np.random.uniform(0, N, 50000)),
        'v': np.round(np.random.uniform(0, N, 50000))
    })
    df2 = df2[(df2["v"] <= df2["u"]) & (df2["u"] <= 730) & (df2["v"] <= 730)]
    total = (len(df2) / len(df2[df2["u"] <= 730])) * len(default)
    fraction = 100.0 * (total / 50000.0)
    fractions.append(fraction)

mean_fraction = np.mean(fractions)

print("Mean Fraction of Charged-Off Loans:", mean_fraction)

# Plot the histogram of the percent of charged-off loans
plt.hist(fractions, color="skyblue", edgecolor="white")
plt.xlabel('Percent of Charged-Off Loans after 3-Year Term')
plt.ylabel('Count')
plt.title("Histogram of Percent of Charged-Off Loans")
plt.show()

# Calculate Confidence Interval of Percentage of Defaulted Loans after 3-year term
std_deviation = np.std(fractions)
confidence_interval = (mean_fraction - 2 * std_deviation, mean_fraction + 2 * std_deviation)
print("Confidence Interval:", confidence_interval)

